from typing import List
from collections import defaultdict

class Solution:
    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:
        n = len(target)
        dp = [float('inf')] * (n + 1)
        dp[0] = 0  
        word_cost = defaultdict(lambda: float('inf'))
        for word, cost in zip(words, costs):
            word_cost[word] = min(word_cost[word], cost)
        for i in range(n):
            if dp[i] == float('inf'):
                continue
            for word in word_cost:
                if target.startswith(word, i):
                    dp[i + len(word)] = min(dp[i + len(word)], dp[i] + word_cost[word])
        
        return dp[n] if dp[n] != float('inf') else -1


